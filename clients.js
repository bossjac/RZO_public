// Import the functions you need from the SDKs you need
import {
    firebaseConfig
} from "./firebaseConfig.js";
import {
    initializeApp
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-app.js";
import {
    getAnalytics
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-analytics.js";
import {
    getDatabase,
    ref,
    set,
    push,
    get,
    update
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-database.js";
import {
    getAuth,
    onAuthStateChanged
} from "https://www.gstatic.com/firebasejs/10.5.0/firebase-auth.js";

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const analytics = getAnalytics(app);
const auth = getAuth();

let userUUID;

onAuthStateChanged(auth, (user) => {
    if (user) {
        userUUID = user.uid; // Capture the user's UID

        // Add event listener to the form submit button
        document.getElementById("client-submit").addEventListener("click", function (event) {
            event.preventDefault(); // Prevent default form submission behavior

            // Retrieve form field values
            const clientName = document.getElementById("clientName").value;
            const clientLastName = document.getElementById("clientLastName").value;
            const clientEmail = document.getElementById("clientEmail").value;
            const clientPhone = document.getElementById("clientPhone").value;

            // Check if name and last name are empty
            if (clientName.trim() === "" || clientLastName.trim() === "") {
                alert("Name and Last Name are required.");
                return; // Stop processing if fields are empty
            }

            // Create a reference to the Firebase database
            const databaseRef = ref(db, `users/${userUUID}/Clients`);

            // Generate a unique key for the new client entry
            const newClientRef = push(databaseRef);

            // Get the unique ID generated by push()
            const clientID = newClientRef.key;

            // Set the client data
            set(newClientRef, {
                id: clientID,
                name: clientName,
                lastName: clientLastName,
                email: clientEmail,
                phone: clientPhone,
                solde: 0
            });

            // Clear the form fields
            document.getElementById("clientName").value = "";
            document.getElementById("clientLastName").value = "";
            document.getElementById("clientEmail").value = "";
            document.getElementById("clientPhone").value = "";

            // Update the displayed data
            displayClientsData();
        });

        // Function to display client data
        function displayClientsData() {
            // Reference to the Clients container
            const clientsContainer = document.getElementById("clientsContainer");

            // Clear the existing content in the container
            clientsContainer.innerHTML = "";

            // Reference to the Clients data in the database
            const clientsRef = ref(db, `users/${userUUID}/Clients`);

            // Retrieve the client data
            get(clientsRef)
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        const clientsData = snapshot.val();

                        // Loop through the clients and create HTML elements
                        for (const clientID in clientsData) {
                            const client = clientsData[clientID];

                            // Create a div for each client's information
                            const clientDiv = document.createElement("div");
                            clientDiv.classList.add('C-box');
                            clientDiv.setAttribute('data-unique-id', clientID);

                            // Set the innerHTML of the div element with the clients details
                            clientDiv.innerHTML = `
                                <div class="C-box-item">${client.name}</div>
                                <div class="C-box-item">${client.lastName}</div>
                                <div class="C-box-item">${client.email}</div>
                                <div class="C-box-item">${client.phone}</div>
                                <div class="C-box-item">${client.solde}</div>
                                <div class="C-box-item button-container">
                                    <button class="small-button edit-button" onclick="editClientProduct('${client.id}')">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"/>
                                        </svg>
                                    </button>
                                    <button class="small-button delete-button" onclick="deleteProduct('${client.id}')">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                            <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"/>
                                        </svg>
                                    </button>
                                </div>
                            `;

                            // Append the clientDiv to the container element
                            clientsContainer.appendChild(clientDiv);
                        }
                    }
                })
                .catch((error) => {
                    console.error("Error getting clients data:", error);
                });
        }

        // Function to edit a client
        window.editClientProduct = function (clientID) {
            // Find the corresponding HTML element
            const clientDiv = document.querySelector(`[data-unique-id="${clientID}"]`);
            if (clientDiv) {
                const clientDetails = clientDiv.querySelectorAll('.C-box-item');
                const currentName = clientDetails[0].textContent;
                const currentLastName = clientDetails[1].textContent;
                const currentEmail = clientDetails[2].textContent;
                const currentPhone = clientDetails[3].textContent;
                const currentSolde = clientDetails[4].textContent;

                // Populate the edit modal with the current client information
                document.getElementById("newName").value = currentName;
                document.getElementById("newLastName").value = currentLastName;
                document.getElementById("newEmail").value = currentEmail;
                document.getElementById("newPhone").value = currentPhone;
                document.getElementById("newSolde").value = currentSolde;

                // Store the clientID for later use
                document.getElementById("client-save-modal").setAttribute("data-client-id", clientID);

                // Show the edit modal
                document.getElementById("client-edit-model").style.display = "block";
            }
        };

        // Function to save the edited client
        document.getElementById("client-save-modal").addEventListener("click", function (event) {
            event.preventDefault();
            console.log("Save client button clicked");

            // Get the clientID from the button's data attribute
            const clientID = this.getAttribute("data-client-id");

            // Get the edited data from the input fields
            const newName = document.getElementById("newName").value;
            const newLastName = document.getElementById("newLastName").value;
            const newEmail = document.getElementById("newEmail").value;
            const newPhone = document.getElementById("newPhone").value;
            const newSolde = document.getElementById("newSolde").value;

            // Update the client in the database using the clientID
            const clientRef = ref(db, `users/${userUUID}/Clients/${clientID}`);
            update(clientRef, {
                name: newName,
                lastName: newLastName,
                email: newEmail,
                phone: newPhone,
                solde: newSolde
            });

            // Find the corresponding HTML element and update it with the new information
            const clientDiv = document.querySelector(`[data-unique-id="${clientID}"]`);
            if (clientDiv) {
                const clientDetails = clientDiv.querySelectorAll('.C-box-item');
                clientDetails[0].textContent = newName;
                clientDetails[1].textContent = newLastName;
                clientDetails[2].textContent = newEmail;
                clientDetails[3].textContent = newPhone;
                clientDetails[4].textContent = newSolde;
            }

            // Close the edit modal
            document.getElementById("client-edit-model").style.display = "none";
        });


        // Function to delete a client
        window.deleteProduct = function (clientID) {
          // Remove the client from the database using the clientID
          const clientRef = ref(db, `users/${userUUID}/Clients/${clientID}`);
          set(clientRef, null);

          // Find the corresponding HTML element and remove it from the page
          const clientDiv = document.querySelector(`[data-unique-id="${clientID}"]`);
          if (clientDiv) {
            clientDiv.remove();
          }
        };

        // Function to close the edit modal
        document.getElementById("client-close-modal").addEventListener("click", function () {
            document.getElementById("client-edit-model").style.display = "none";
        });

        displayClientsData();
    }
});
